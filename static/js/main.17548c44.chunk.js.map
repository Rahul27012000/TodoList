{"version":3,"sources":["Modals/CreateTask.js","Modals/EditTask.js","Components/Card.js","Components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["CreateTaskPopup","modal","toggle","save","useState","taskName","setTaskName","description","setDescription","handleChange","e","target","name","value","Modal","isOpen","ModalHeader","ModalBody","className","type","onChange","rows","ModalFooter","Button","color","onClick","preventDefault","taskObj","EditTaskPopup","updateTask","useEffect","Name","Description","tempObj","Card","index","deleteTask","updateListArray","setModal","colors","primaryColor","secondaryColor","class","style","height","EditTask","obj","TodoList","taskList","setTaskList","arr","localStorage","getItem","JSON","parse","tempList","splice","setItem","stringify","window","location","reload","map","CreateTask","push","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAoDeA,EAjDS,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,KAAU,EACfC,mBAAS,IADM,mBACxCC,EADwC,KAC9BC,EAD8B,OAETF,mBAAS,IAFA,mBAExCG,EAFwC,KAE3BC,EAF2B,KAIzCC,EAAe,SAACC,GAAO,IAAD,EAEFA,EAAEC,OAAjBC,EAFiB,EAEjBA,KAAMC,EAFW,EAEXA,MAED,aAATD,EACCN,EAAYO,GAEZL,EAAeK,IAevB,OACI,eAACC,EAAA,EAAD,CAAOC,OAAQd,EAAOC,OAAQA,EAA9B,UACI,cAACc,EAAA,EAAD,CAAad,OAAQA,EAArB,8BACA,eAACe,EAAA,EAAD,WAEQ,sBAAKC,UAAY,aAAjB,UACI,oDACA,uBAAOC,KAAK,OAAOD,UAAY,eAAeL,MAASR,EAAUe,SAAYX,EAAcG,KAAO,gBAEtG,sBAAKM,UAAY,aAAjB,UACI,sDACA,0BAAUG,KAAO,IAAIH,UAAY,eAAeL,MAASN,EAAaa,SAAYX,EAAcG,KAAO,sBAInH,eAACU,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAzBb,SAACf,GAChBA,EAAEgB,iBACF,IAAIC,EAAU,GACdA,EAAO,KAAWtB,EAClBsB,EAAO,YAAkBpB,EACzBJ,EAAKwB,IAoBD,oBACA,cAACJ,EAAA,EAAD,CAAQC,MAAM,YAAYC,QAASvB,EAAnC,2BCUG0B,EArDO,SAAC,GAA0C,IAAzC3B,EAAwC,EAAxCA,MAAOC,EAAiC,EAAjCA,OAAQ2B,EAAyB,EAAzBA,WAAYF,EAAa,EAAbA,QAAa,EAC5BvB,mBAAS,IADmB,mBACrDC,EADqD,KAC3CC,EAD2C,OAEtBF,mBAAS,IAFa,mBAErDG,EAFqD,KAExCC,EAFwC,KAItDC,EAAe,SAACC,GAAO,IAAD,EAEFA,EAAEC,OAAjBC,EAFiB,EAEjBA,KAAMC,EAFW,EAEXA,MAED,aAATD,EACCN,EAAYO,GAEZL,EAAeK,IAMvBiB,qBAAU,WACNxB,EAAYqB,EAAQI,MACpBvB,EAAemB,EAAQK,eACzB,IAUF,OACI,eAAClB,EAAA,EAAD,CAAOC,OAAQd,EAAOC,OAAQA,EAA9B,UACI,cAACc,EAAA,EAAD,CAAad,OAAQA,EAArB,yBACA,eAACe,EAAA,EAAD,WAEQ,sBAAKC,UAAY,aAAjB,UACI,8CACA,uBAAOC,KAAK,OAAOD,UAAY,eAAeL,MAASR,EAAUe,SAAYX,EAAcG,KAAO,gBAEtG,sBAAKM,UAAY,aAAjB,UACI,gDACA,0BAAUG,KAAO,IAAIH,UAAY,eAAeL,MAASN,EAAaa,SAAYX,EAAcG,KAAO,sBAInH,eAACU,EAAA,EAAD,WACA,cAACC,EAAA,EAAD,CAAQC,MAAM,UAAUC,QAxBX,SAACf,GAClBA,EAAEgB,iBACF,IAAIO,EAAU,GACdA,EAAO,KAAW5B,EAClB4B,EAAO,YAAkB1B,EACzBsB,EAAWI,IAmBP,oBACA,cAACV,EAAA,EAAD,CAAQC,MAAM,YAAYC,QAASvB,EAAnC,2BCYGgC,EA3DF,SAAC,GAAqD,IAAnDP,EAAkD,EAAlDA,QAASQ,EAAyC,EAAzCA,MAAOC,EAAkC,EAAlCA,WAAYC,EAAsB,EAAtBA,gBAAsB,EACpCjC,oBAAS,GAD2B,mBACvDH,EADuD,KAChDqC,EADgD,KAGxDC,EAAS,CACX,CACIC,aAAc,UACdC,eAAgB,WAEpB,CACID,aAAc,UACdC,eAAgB,WAEpB,CACID,aAAc,UACdC,eAAgB,WAEpB,CACID,aAAc,UACdC,eAAgB,WAEpB,CACID,aAAc,UACdC,eAAgB,YAgBxB,OAEI,sBAAKC,MAAM,0CAAX,UACI,qBAAKA,MAAM,WAAWC,MAAO,CAAE,mBAAoBJ,EAAOJ,EAAQ,GAAGK,gBACrE,sBAAKE,MAAM,cAAX,UACI,sBAAMA,MAAM,cAAcC,MAAO,CAAE,mBAAoBJ,EAAOJ,EAAQ,GAAGM,eAAgB,gBAAiB,OAAQG,OAAQ,OAA1H,SAAoIjB,EAAQI,OAC5I,mBAAGb,UAAU,OAAb,SAAqBS,EAAQK,cAE7B,sBAAKW,MAAO,CAAE,SAAY,WAAY,MAAS,OAAQ,OAAU,QAAjE,UACI,mBAAGD,MAAM,mBAAmBC,MAAO,CAAE,MAASJ,EAAOJ,EAAQ,GAAGK,aAAc,OAAU,WAAaf,QAAS,kBAAMa,GAAS,MAC7H,mBAAGI,MAAM,mBAAmBC,MAAO,CAAE,MAASJ,EAAOJ,EAAQ,GAAGK,aAAc,OAAU,WAAaf,QAdhG,WACjBW,EAAWD,YAiBP,cAACU,EAAD,CAAU5C,MAAOA,EAAOC,OA1BjB,WACXoC,GAAUrC,IAyBkC4B,WAtB7B,SAACiB,GAChBT,EAAgBS,EAAKX,IAqB+CR,QAASA,QCMtEoB,EAzDE,WAAO,IAAD,EACO3C,oBAAS,GADhB,mBACZH,EADY,KACLqC,EADK,OAEalC,mBAAS,IAFtB,mBAEZ4C,EAFY,KAEFC,EAFE,KAInBnB,qBAAU,WACN,IAAIoB,EAAMC,aAAaC,QAAQ,YAE/B,GAAGF,EAAI,CACH,IAAIJ,EAAMO,KAAKC,MAAMJ,GACrBD,EAAYH,MAEjB,IAGH,IAAMV,EAAa,SAACD,GAChB,IAAIoB,EAAWP,EACfO,EAASC,OAAOrB,EAAO,GACvBgB,aAAaM,QAAQ,WAAYJ,KAAKK,UAAUH,IAChDN,EAAYM,GACZI,OAAOC,SAASC,UAGdxB,EAAkB,SAACS,EAAKX,GAC1B,IAAIoB,EAAWP,EACfO,EAASpB,GAASW,EAClBK,aAAaM,QAAQ,WAAYJ,KAAKK,UAAUH,IAChDN,EAAYM,GACZI,OAAOC,SAASC,UAgBpB,OACI,qCACI,sBAAK3C,UAAY,qBAAjB,UACI,qDACA,wBAAQA,UAAY,uBAAuBO,QAAW,kBAAMa,GAAS,IAArE,qCAEJ,qBAAKpB,UAAY,iBAAjB,SACC8B,GAAYA,EAASc,KAAI,SAAChB,EAAMX,GAAP,OAAiB,cAAC,EAAD,CAAMR,QAAWmB,EAAKX,MAASA,EAAOC,WAAcA,EAAYC,gBAAmBA,SAE9H,cAAC0B,EAAD,CAAY7D,OAtBL,WACXoC,GAAUrC,IAqBwBA,MAASA,EAAOE,KAlBrC,SAACwB,GACd,IAAI4B,EAAWP,EACfO,EAASS,KAAKrC,GACdwB,aAAaM,QAAQ,WAAYJ,KAAKK,UAAUH,IAChDjB,GAAS,GACTW,EAAYD,U,MC9BLiB,MARf,WACE,OACE,8BACA,cAAC,EAAD,OCIWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.17548c44.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst CreateTaskPopup = ({modal, toggle, save}) => {\r\n    const [taskName, setTaskName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        \r\n        const {name, value} = e.target\r\n\r\n        if(name === \"taskName\"){\r\n            setTaskName(value)\r\n        }else{\r\n            setDescription(value)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    const handleSave = (e) => {\r\n        e.preventDefault()\r\n        let taskObj = {}\r\n        taskObj[\"Name\"] = taskName\r\n        taskObj[\"Description\"] = description\r\n        save(taskObj)\r\n\r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Create Your Task</ModalHeader>\r\n            <ModalBody>\r\n                \r\n                    <div className = \"form-group\">\r\n                        <label>Enter Task Name</label>\r\n                        <input type=\"text\" className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\"/>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <label>Enter Description</label>\r\n                        <textarea rows = \"5\" className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\r\n                    </div>\r\n                \r\n            </ModalBody>\r\n            <ModalFooter>\r\n            <Button color=\"primary\" onClick={handleSave}>Create</Button>\r\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n      </Modal>\r\n    );\r\n};\r\n\r\nexport default CreateTaskPopup;","import React, { useState , useEffect} from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nconst EditTaskPopup = ({modal, toggle, updateTask, taskObj}) => {\r\n    const [taskName, setTaskName] = useState('');\r\n    const [description, setDescription] = useState('');\r\n\r\n    const handleChange = (e) => {\r\n        \r\n        const {name, value} = e.target\r\n\r\n        if(name === \"taskName\"){\r\n            setTaskName(value)\r\n        }else{\r\n            setDescription(value)\r\n        }\r\n\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        setTaskName(taskObj.Name)\r\n        setDescription(taskObj.Description)\r\n    },[])\r\n\r\n    const handleUpdate = (e) => {\r\n        e.preventDefault();\r\n        let tempObj = {}\r\n        tempObj['Name'] = taskName\r\n        tempObj['Description'] = description\r\n        updateTask(tempObj)\r\n    }\r\n\r\n    return (\r\n        <Modal isOpen={modal} toggle={toggle}>\r\n            <ModalHeader toggle={toggle}>Update Task</ModalHeader>\r\n            <ModalBody>\r\n            \r\n                    <div className = \"form-group\">\r\n                        <label>Task Name</label>\r\n                        <input type=\"text\" className = \"form-control\" value = {taskName} onChange = {handleChange} name = \"taskName\"/>\r\n                    </div>\r\n                    <div className = \"form-group\">\r\n                        <label>Description</label>\r\n                        <textarea rows = \"5\" className = \"form-control\" value = {description} onChange = {handleChange} name = \"description\"></textarea>\r\n                    </div>\r\n                \r\n            </ModalBody>\r\n            <ModalFooter>\r\n            <Button color=\"primary\" onClick={handleUpdate}>Update</Button>\r\n            <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\r\n            </ModalFooter>\r\n      </Modal>\r\n    );\r\n};\r\n\r\nexport default EditTaskPopup;","import React, { useState } from 'react';\r\nimport EditTask from '../Modals/EditTask'\r\n\r\nconst Card = ({ taskObj, index, deleteTask, updateListArray }) => {\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const colors = [\r\n        {\r\n            primaryColor: \"#5D93E1\",\r\n            secondaryColor: \"#ECF3FC\"\r\n        },\r\n        {\r\n            primaryColor: \"#F9D288\",\r\n            secondaryColor: \"#FEFAF1\"\r\n        },\r\n        {\r\n            primaryColor: \"#5DC250\",\r\n            secondaryColor: \"#F2FAF1\"\r\n        },\r\n        {\r\n            primaryColor: \"#F48687\",\r\n            secondaryColor: \"#FDF1F1\"\r\n        },\r\n        {\r\n            primaryColor: \"#B964F7\",\r\n            secondaryColor: \"#F3F0FD\"\r\n        }\r\n    ]\r\n\r\n    const toggle = () => {\r\n        setModal(!modal);\r\n    }\r\n\r\n    const updateTask = (obj) => {\r\n        updateListArray(obj, index)\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        deleteTask(index)\r\n    }\r\n\r\n    return (\r\n\r\n        <div class=\"card-wrapper col-md-5 col-12 mr-5 mb-4 \">\r\n            <div class=\"card-top\" style={{ \"background-color\": colors[index % 5].primaryColor }}></div>\r\n            <div class=\"task-holder\">\r\n                <span class=\"card-header\" style={{ \"background-color\": colors[index % 5].secondaryColor, \"border-radius\": \"10px\", height: '5vh' }}>{taskObj.Name}</span>\r\n                <p className=\"mt-3\">{taskObj.Description}</p>\r\n\r\n                <div style={{ \"position\": \"absolute\", \"right\": \"20px\", \"bottom\": \"20px\" }}>\r\n                    <i class=\"far fa-edit mr-3\" style={{ \"color\": colors[index % 5].primaryColor, \"cursor\": \"pointer\" }} onClick={() => setModal(true)}></i>\r\n                    <i class=\"fas fa-trash-alt\" style={{ \"color\": colors[index % 5].primaryColor, \"cursor\": \"pointer\" }} onClick={handleDelete}></i>\r\n                </div>\r\n            </div>\r\n\r\n            <EditTask modal={modal} toggle={toggle} updateTask={updateTask} taskObj={taskObj} />\r\n\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Card;","import React, {useEffect, useState} from 'react';\r\nimport CreateTask from '../Modals/CreateTask'\r\nimport Card from './Card';\r\n\r\nconst TodoList = () => {\r\n    const [modal, setModal] = useState(false);\r\n    const [taskList, setTaskList] = useState([])\r\n    \r\n    useEffect(() => {\r\n        let arr = localStorage.getItem(\"taskList\")\r\n       \r\n        if(arr){\r\n            let obj = JSON.parse(arr)\r\n            setTaskList(obj)\r\n        }\r\n    }, [])\r\n\r\n\r\n    const deleteTask = (index) => {\r\n        let tempList = taskList\r\n        tempList.splice(index, 1)\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n    }\r\n\r\n    const updateListArray = (obj, index) => {\r\n        let tempList = taskList\r\n        tempList[index] = obj\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setTaskList(tempList)\r\n        window.location.reload()\r\n    }\r\n\r\n    const toggle = () => {\r\n        setModal(!modal);\r\n    }\r\n\r\n    const saveTask = (taskObj) => {\r\n        let tempList = taskList\r\n        tempList.push(taskObj)\r\n        localStorage.setItem(\"taskList\", JSON.stringify(tempList))\r\n        setModal(false)\r\n        setTaskList(taskList)\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <div className = \"header text-center\">\r\n                <h3>To-Do List By Rahul</h3>\r\n                <button className = \"btn btn-primary mt-2\" onClick = {() => setModal(true)} >Create Your Task Now</button>\r\n            </div>\r\n            <div className = \"task-container\">\r\n            {taskList && taskList.map((obj , index) => <Card taskObj = {obj} index = {index} deleteTask = {deleteTask} updateListArray = {updateListArray}/> )}\r\n            </div>\r\n            <CreateTask toggle = {toggle} modal = {modal} save = {saveTask}/>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default TodoList;","\nimport './App.css';\nimport TodoList from './Components/TodoList.js'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nfunction App() {\n  return (\n    <div>\n    <TodoList/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}